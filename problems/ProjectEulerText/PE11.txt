import time

start = time.time()
grid = open("20x20_Grid_Eular_Project11", "r")

Matrix = []

Line = grid.readlines()

for i in range(0, 20):
    raw = []
    for j in range(0, 20):
        raw.append(Line[i][3 * j: 3 * j + 2])
    Matrix.append(raw)

Max_Product = 0

# Adjacent in a raw
for j in range(0, 20):
    for i in range(0, 17):
        if int(Matrix[j][i]) * int(Matrix[j][i + 1]) * int(Matrix[j][i + 2]) * int(Matrix[j][i + 3]) > Max_Product:
            Max_Product = int(Matrix[j][i]) * int(Matrix[j][i + 1]) * int(Matrix[j][i + 2]) * int(Matrix[j][i + 3])

# Adjacent in a column
for j in range(0, 20):
    for i in range(0, 17):
        if int(Matrix[i][j]) * int(Matrix[i + 1][j]) * int(Matrix[i + 2][j]) * int(Matrix[i + 3][j]) > Max_Product:
            Max_Product = int(Matrix[i][j]) * int(Matrix[i + 1][j]) * int(Matrix[i + 2][j]) * int(Matrix[i + 3][j])

# Adjacent diagonally (positive)
for i in range(0, 17):
    for j in range(0, 17):
        if int(Matrix[i][j]) * int(Matrix[i + 1][j + 1]) * int(Matrix[i + 2][j + 2]) * \
                int(Matrix[i + 3][j + 3]) > Max_Product:
            Max_Product = int(Matrix[i][j]) * int(Matrix[i + 1][j + 1]) * \
                          int(Matrix[i + 2][j + 2]) * int(Matrix[i + 3][j + 3])

# Adjacent diagonally (negatively)
for i in range(0, 17):
    for j in range(3, 20):
        if int(Matrix[i][j]) * int(Matrix[i + 1][j - 1]) * int(Matrix[i + 2][j - 2]) * \
                int(Matrix[i + 3][j - 3]) > Max_Product:
            Max_Product = int(Matrix[i][j]) * int(Matrix[i + 1][j - 1]) * int(Matrix[i + 2][j - 2]) * \
                int(Matrix[i + 3][j - 3])

print(Max_Product)

end = time.time()
print(end - start)
